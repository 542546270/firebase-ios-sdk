syntax = "proto2";

package mobilegtalk;

message HeartbeatPing {
  optional int32 stream_id = 1;
  optional int32 last_stream_id_received = 2;
  optional int64 status = 3;
  // DEPRECATED for privacy concerns, see b/69425844. This field is no longer
  // sent by recent versions of the client library and is stripped on the
  // server-side due to privacy concerns.
  optional CellTower cell_tower = 4 [deprecated = true];
  // Current heartbeat interval
  optional int32 interval_ms = 5;
}

message HeartbeatAck {
  optional int32 stream_id = 1;
  optional int32 last_stream_id_received = 2;
  optional int64 status = 3;
  // DEPRECATED for privacy concerns, see b/69425844. This field is no longer
  // sent by recent versions of the client library and is stripped on the
  // server-side due to privacy concerns.
  optional CellTower cell_tower = 4 [deprecated = true];
  // Current heartbeat interval
  optional int32 interval_ms = 5;
}

message ErrorInfo {
  required int32 code = 1;
  optional string message = 2;
  optional string type = 3;
  optional Extension extension = 4;
}

message Setting {
  required string name = 1;
  required string value = 2;
}

message HeartbeatStat {
  required string ip = 1;
  required bool timeout = 2;
  required int32 interval_ms = 3;
  // If set, the server is expected to send heartbeats at the heartbeat
  // interval. The client will send a heartbeat only if it doesn't receive one
  // from the server, 30 seconds later. If the flag isn't set, the roles
  // are reversed (i.e. the client sends heartbeats at the exact interval).
  optional bool enable_deferred_client_heartbeats = 4 [default = false];
}

message HeartbeatConfig {
  optional bool upload_stat = 1;
  optional string ip = 2;
  optional int32 interval_ms = 3;
}

// TAG: 2
// Next id to use: 30
message LoginRequest {
  // obsolete fields
  reserved 9, 12;

  enum AuthService {
    MAIL = 0;
    ANDROID_CLOUD_TO_DEVICE_MESSAGE = 1;
    ANDROID_ID = 2;
    IID = 3;
  }
  required string id = 1;
  required string domain = 2;
  required string user = 3;
  required string resource = 4;
  required string auth_token = 5;
  optional string device_id = 6;
  optional int64 last_rmq_id = 7;
  // This contains a bunch of different key/values pairs including the state
  // of users on Android devices (list of FOREGROUND, BACKGROUND and STOPPED
  // users)
  repeated Setting setting = 8;
  // obsolete: 9;
  repeated string received_persistent_id = 10;
  optional bool include_stream_ids = 11;
  // obsolete: 12;
  optional HeartbeatStat heartbeat_stat = 13;
  optional bool use_rmq2 = 14;
  optional int64 account_id = 15;
  optional AuthService auth_service = 16;
  // Network type (WiFi/Cellular/..) based on android.net.ConnectivityManager
  // -1 for unknown, 0 for mobile, 1 for wifi etc,
  optional int32 network_type = 17;
  optional int64 status = 18;
  // Used for Kansas version info, to avoid replication delays.
  optional string token_version_info = 19;
  // DEPRECATED for privacy concerns, see b/69425844. This field is no longer
  // sent by recent versions of the client library and is stripped on the
  // server-side due to privacy concerns.
  optional CellTower cell_tower = 20 [deprecated = true];

  // Time at which the GCM component has been started on the client.
  // The timestamps in client_event are delta relative to this time.
  optional uint64 gcm_start_time_ms = 21;

  // Events recorded on the client after the last successful connection.
  repeated ClientEvent client_event = 22;

  // Whether the current connection is against a fallback server.
  optional bool on_fallback = 23;

  // Whether there are any pending upstream (d2s) messages on the client.
  optional bool no_pending_upstream = 24;

  // The random number the reconnect UDP socket is listening for
  // in order to trigger a reconnect.
  optional int32 reconnect_request_id = 25;

  // if on_fallback, the current fallback mode
  enum FallbackMode {
    FALLBACK_MODE_UNKNOWN = 0;
    FALLBACK_NONE = 1;                  // not on fallback
    FALLBACK_ALTERNATIVE_HOSTPORT = 2;  // fallback on alternate host/port
    FALLBACK_CELLULAR = 3;              // cellular fallback on bad wifi
  }
  optional FallbackMode fallback_mode = 26;

  // MCC-MNC code of the connected cell operator (through which the connection
  // was made)
  optional int32 cell_operator_mccmnc = 27;

  enum MobileNetworkClass {
    NETWORK_CLASS_UNKNOWN = 0;
    NETWORK_CLASS_2G = 1;
    NETWORK_CLASS_3G = 2;
    NETWORK_CLASS_4G = 3;
  }

  // Mobile network class of the connected cell operator
  optional MobileNetworkClass mobile_network_class = 28;

  // Emergency regions for alerting (go/fcm-earthquake-alerts-design)
  repeated string emergency_regions = 29;
}

// TAG: 3
message LoginResponse {
  required string id = 1;
  optional string jid = 2;
  optional ErrorInfo error = 3;
  repeated Setting setting = 4;
  optional int32 stream_id = 5;
  optional int32 last_stream_id_received = 6;
  optional HeartbeatConfig heartbeat_config = 7;
  // used by the client to synchronize with the server timestamp.
  // MCS protocol version 6 and above (ICS+).
  optional int64 server_timestamp = 8;
}

// The BindAccountRequest is for multiple account login using one
// single connection to the MobileConnectionServer.
// After the LoginRequest every new account should login using the
// BindAccountRequest.
// TODO(nero): Make BindAccount message part of LoginRequest to
// avoid duplicate fields.
message BindAccountRequest {
  required string id = 1;
  required string domain = 2;
  required string user = 3;
  required string resource = 4;
  required string auth_token = 5;
  optional string persistent_id = 6;
  optional int32 stream_id = 7;
  optional int32 last_stream_id_received = 8;
  optional int64 account_id = 9;
}

message BindAccountResponse {
  required string id = 1;
  optional string jid = 2;
  optional ErrorInfo error = 3;
  optional int32 stream_id = 4;
  optional int32 last_stream_id_received = 5;
}

message StreamErrorStanza {
  required string type = 1;
  optional string text = 2;
}

// TAG: 4
message Close {}

message Extension {
  required int32 id = 1;
  required string data = 2;
}

message MessageStanza {
  enum MessageType {
    NORMAL = 0;
    CHAT = 1;
    GROUPCHAT = 2;
    HEADLINE = 3;
    ERROR = 4;
  }

  optional int64 rmqId = 1;
  optional MessageType type = 2;
  optional string id = 3;
  optional string from = 4;
  optional string to = 5;
  optional string subject = 6;
  optional string body = 7;
  optional string thread = 8;
  optional ErrorInfo error = 9;
  repeated Extension extension = 10;
  optional bool nosave = 11;
  optional int64 timestamp = 12;
  optional string persistent_id = 13;
  optional int32 stream_id = 14;
  optional int32 last_stream_id_received = 15;
  optional bool read = 16;
  optional int64 account_id = 17;
}

message PresenceStanza {
  enum PresenceType {
    UNAVAILABLE = 0;
    SUBSCRIBE = 1;
    SUBSCRIBED = 2;
    UNSUBSCRIBE = 3;
    UNSUBSCRIBED = 4;
    PROBE = 5;
    ERROR = 6;
  }

  enum ShowType {
    AWAY = 0;
    CHAT = 1;
    DND = 2;
    XA = 3;
  }

  enum ClientType {
    MOBILE = 0;
    ANDROID = 1;
  }

  // Keep in sync with PostAuthBatchQuery in gtalk_extensions.proto
  // TODO(niko): Try to use proto2 enum support to consolidate this one.
  enum CapabilitiesFlags {
    HAS_VOICE_V1 = 1;   // Voice Chat (talk plugin.)
    HAS_VIDEO_V1 = 2;   // Video      (talk plugin.)
    HAS_CAMERA_V1 = 4;  // Camera for sending video.
    HAS_PMUC_V1 = 8;    // Private Multi-User Conference aka Group Chat.
  }

  optional int64 rmqId = 1;
  optional PresenceType type = 2;
  optional string id = 3;
  optional string from = 4;
  optional string to = 5;
  optional ShowType show = 6;
  optional string status = 7;
  optional int32 priority = 8;
  optional ErrorInfo error = 9;
  repeated Extension extension = 10;
  optional ClientType client = 11;
  optional string avatar_hash = 12;
  optional string persistent_id = 13;
  optional int32 stream_id = 14;
  optional int32 last_stream_id_received = 15;
  optional int32 capabilities_flags = 16;  // CapabilitiesFlags bits
  optional int64 account_id = 17;
}

message BatchPresenceStanza {
  enum Type {
    GET = 0;
    SET = 1;
  }
  optional string id = 1;
  optional string to = 2;
  repeated PresenceStanza presence = 3;
  optional string persistent_id = 4;
  optional int32 stream_id = 5;
  optional int32 last_stream_id_received = 6;
  optional int64 account_id = 7;
  optional Type type = 8;
  optional ErrorInfo error = 9;
}

// TODO(debajit): split into IqRequest, IqResponse?
// IqRequest must contain a single extension.  IqResponse may contain 0 or 1
// extensions.
// TAG: 7
message IqStanza {
  enum IqType {
    GET = 0;
    SET = 1;
    RESULT = 2;
    ERROR = 3;
  }

  optional int64 rmq_id = 1;
  required IqType type = 2;
  required string id = 3;
  optional string from = 4;
  optional string to = 5;
  optional ErrorInfo error = 6;
  optional Extension extension = 7;
  optional string persistent_id = 8;
  optional int32 stream_id = 9;
  optional int32 last_stream_id_received = 10;
  optional int64 account_id = 11;
  optional int64 status = 12;
}

message AppData {
  required string key = 1;
  required string value = 2;
}

// TAG: 8
message DataMessageStanza {
  optional int64 rmq_id = 1;
  optional string id = 2;
  required string from = 3;
  optional string to = 4;
  required string category = 5;
  optional string token = 6;
  repeated AppData app_data = 7;
  optional bool from_trusted_server = 8;
  optional string persistent_id = 9;
  optional int32 stream_id = 10;
  optional int32 last_stream_id_received = 11;
  optional string permission = 12;
  // the following fields are used by an app to
  // send messages to the server using the MCS
  // connection (d2cm).
  optional string reg_id = 13;
  optional string pkg_signature = 14;
  optional string client_id = 15;
  // User identifier for the multiple users feature.
  optional int64 device_user_id = 16;
  // Time to live, in seconds.
  optional int32 ttl = 17;
  // Sent time in milliseconds since the Epoch.
  // For downstream messages, this contains the timestamp the request was
  // received by GCM (DMBE, possibly CCS too). This timestamp is propagated from
  // 'DataMessageProto.sent' to here.
  // For upstream messages, client may set this field, but clock-skew could
  // render this field useless for upstream messages.
  // It seems originally this was meant for upstream messages, but it was
  // never useful enough because of clock skew.
  // For earthquake broadcast messages, this represents the timestamp the
  // publisher publishes the message in Pubsub.
  optional int64 sent = 18;
  // How long in seconds the message spent in the client queue.
  optional int32 queued = 19;
  optional int64 status = 20;
  // Common feature request to include a binary payload ( protobuf, etc ).
  optional bytes raw_data = 21;
  // The maximum delay of the message, in seconds
  optional int32 max_delay = 22;
  // How long the message has been delayed before it was sent, in seconds.
  optional int32 actual_delay = 23;
  // If set, the server requests immediate ack. Used for 'important' messages
  // and for testing.
  optional bool immediate_ack = 24;
  // Enable message receipts from MCS/GCM back to CCS Clients.
  // TODO: Change this field to payload_encrypted
  optional bool delivery_receipt_requested = 25;
  // Message Id that was set by the sender. If sender did not set one, it will
  // be the id generated by GCM. Currently, this field is used to set messageIds
  // in the receipts sent back to the sender.
  optional string external_message_id = 26;
  // Type of message receipts from MCS/GCM back to CCS/First Party Clients.
  // May be used for different purposes later on.
  optional int64 flags = 27;
  // DEPRECATED for privacy concerns, see b/69425844. This field is no longer
  // sent by recent versions of the client library and is stripped on the
  // server-side due to privacy concerns.
  optional CellTower cell_tower = 28 [deprecated = true];
  // priority level
  // 5 = normal, 10 = high
  optional int32 priority = 29;
  // TODO(dgiorgini): add repeated ClientEvent client_event when needed.
}

message TalkMetadata {
  optional bool foreground = 1;
}

// DEPRECATED for privacy concerns, see b/69425844.
message CellTower {
  option deprecated = true;

  optional string id = 1;
  optional int32 known_congestion_status = 2;
}

/**
 * Events recorded on the client.
 * During every LoginRequest the device uploads the events recorded
 * since the last successful connection.
 * All the times are relative to gcm_service_creation_time_ms
 *
 * IMPORTANT: ClientEvent definition must be kept in sync with
 * buzzlogentry.proto which is where MCS logs it. This is due to logs
 * requirements.
 */
message ClientEvent {
  enum Type {
    UNKNOWN = 0;
    // Placeholder for discarded events in the case we recorded more than
    // allowed.
    DISCARDED_EVENTS = 1;
    // Failed connection event: the connection failed to be established or we
    // had a login error.
    FAILED_CONNECTION = 2;
    // Successful connection event: same as failed_connection +
    // time_connection_established_ms
    SUCCESSFUL_CONNECTION = 3;
    // MCS requested a forced reconnect.
    MCS_RECONNECT_REQUEST = 4;
    // Failed to open UDP port for listening for MCS reconnect requests.
    FAILED_SOCKET_CREATION_MCS_RECONNECT = 5;
    // MCS reconnect UDP port received too many bad requests and was closed.
    MCS_RECONNECT_LIMITED = 6;
  }

  // What action FCM took in response to a valid MCS reconnect request.
  enum McsReconnectAction {
    NONE = 0;
    // Request was rejected because FCM was not connected to MCS when the
    // request was received.
    NOT_CONNECTED = 1;
    // Request was rejected because it occurred too soon after one already
    // happened.
    TOO_SOON = 2;
  }

  // Common fields [1-99]
  optional Type type = 1;

  // Fields for DISCARDED_EVENTS [100-199]
  optional uint32 number_discarded_events = 100;

  // Fields for FAILED_CONNECTION and SUCCESSFUL_CONNECTION [200-299]
  optional int32 network_type = 200;
  optional int32 network_port = 201;
  optional uint64 time_connection_started_ms = 202;
  optional uint64 time_connection_ended_ms = 203;
  optional int32 error_code = 204;

  // Fields for SUCCESSFUL_CONNECTION [300-399]
  optional uint64 time_connection_established_ms = 300;

  // Fields for MCS_TRIGGERED_RECONNECT [400-499]
  optional McsReconnectAction mcs_reconnect_action = 400;
}
